-title: スケジューラのシミュレーション

<ul>
<li><a href="Makefile.html"> Makefile</a>
<li><a href="event.c.html"> event.c</a>
<li><a href="event.h.html"> event.h</a>
<li><a href="event_pool.c.html"> event_pool.c</a>
<li><a href="main.c.html"> main.c</a>
<li><a href="queue.c.html"> queue.c</a>
<li><a href="queue.h.html"> queue.h</a>
<li><a href="queue_pool.c.html"> queue_pool.c</a>
<li><a href="simulate.c.html"> simulate.c</a>
<li><a href="task.c.html"> task.c</a>
<li><a href="task.h.html"> task.h</a>
</ul>

C の標準的な書き方、ファイルの分割の方法、Makefile の書き方などを
習得すること。

malloc/free を直接使わずに自分でオブジェクトのメモリを管理する
手法に付いても考えよう。(cf. Effective C++)

ソースは、こっち。

<a href="os-queue.tar"> os-queue.tar</a>

Perl/Tk で書いた出力のviewerも使ってみよう。

--問題4.3

main.c を変更して、priority scheduling と round robin
scheduling をシミュレーションせよ。

--問題4.4

task.c を変更して、マルチCPU対応にしてみよ。queue の配列をCPUとみなせば良い。
event.c 等を参考に CPU 毎の task 構造体を作る必要がある。
CPUの数は1,2,4,8,16 の可変とする。

--問題4.5 (option)

simulate.c を変更して、dead line first scheduling
をシミュレーションせよ。

Non periodical task を一緒にテストするにはどうしたら良いか? 

--問題4.6 (option)

以上の例題を、別なプログラミング言語で記述してみよ。

     Perl/Tk
     Java
     C++
     Squeak

その他...  

     Python
     Ruby
     Emacs Lisp

それぞれの言語の特徴が出るようにプログラミングせよ。
