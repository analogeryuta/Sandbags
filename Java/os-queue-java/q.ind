-title: スケジューラのシミュレーション (Java)


<ul>
<li><a href="schedularSimulator/Event.java.html"> schedularSimulator/Event.java </a>
<li><a href="schedularSimulator/EventInterface.java.html"> schedularSimulator/EventInterface.java </a>
<li><a href="schedularSimulator/PeriodicalRun.java.html"> schedularSimulator/PeriodicalRun.java </a>
<li><a href="schedularSimulator/RateMonotonicEvent.java.html"> schedularSimulator/RateMonotonicEvent.java </a>
<li><a href="schedularSimulator/Run.java.html"> schedularSimulator/Run.java </a>
<li><a href="schedularSimulator/Task.java.html"> schedularSimulator/Task.java </a>
</ul>

Eclipse でプログラミングを行うこと。

ソースは、こっち。

<a href=" os-queue-java.tgz ">  os-queue-java.tgz </a>

Run は FIFO, SJF のスケジューラーをシミュレートしている。
    java schedulerSimulator/Run data/task_data.01
    java schedulerSimulator/Run data/task_data.02
などを動かしてみよう。

PeriodcalRun は Rate Monotonic のスケジューラーをシミュレートしている。
    java schedulerSimulator/PeriodicalRun data/task_data.p1
    java schedulerSimulator/PeriodicalRun data/task_data.p2
などを動かしてみよう。

--問題4.3

Run.java
を変更して、priority scheduling と round robin
scheduling をシミュレーションせよ。

--問題4.4

Run.java, Task.java を参考に MultiRun.java を書き、マルチCPU対応にしてみよ。
Task のPriorityQueue をCPUとみなせば良い。

CPUの数は1,2,4,8,16 の可変とする。

--問題4.5 (option)

PeriodicalRun, Event を拡張して、
dead line first scheduling
をシミュレーションせよ。

Non periodical task を一緒にテストするにはどうしたら良いか? 

